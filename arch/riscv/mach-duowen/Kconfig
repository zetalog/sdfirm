#
# For a description of the syntax of this configuration file,
# see scripts/kbuild/config-language.txt.
#

if ARCH_DUOWEN

menu "Smart Core Duowen board options"

choice
	prompt "Programmed CPUs"
	help
	  Selects CPUs that compiled sdfirm should run against.

config DUOWEN_IMC
	bool "IMC - system fabric (SFAB)"
	select CPU_CVA6

config DUOWEN_APC
	bool "APC - coherence fabric (CFAB)"
	select CPU_VAISRA
	select VAISRA_PMA
	select ARCH_HAS_DMA
	select ARCH_HAS_IOMMU
	select ARCH_HAS_PCI
	select DUOWEN_APC_BOOT_HOOK if (SMP && !DUOWEN_SBL_LOAD)
	select DUOWEN_APC_3 if (SMP && DUOWEN_FPGA)
	help
	  It is too late for vaisra to initialize its SMP cores in SBI due
	  to the restrictions of the vaisra atomicity implementation, so
	  they need to be done earlier via bootloader hooks.

endchoice

config DUOWEN_BOOT
	bool

config DUOWEN_FIRM
	bool

config DUOWEN_LOAD_ZSBL
	bool

config DUOWEN_LOAD_FSBL
	bool

config DUOWEN_LOAD_BBL
	bool

choice
	prompt "Program type"

config DUOWEN_ZSBL
	bool "0-stage ROM bootloader (ZSBL)"
	select DUOWEN_BOOT
	select DUOWEN_LOAD_ZSBL
	select DUOWEN_BOOT_APC if DUOWEN_APC
	select XIP
	select LOAD_DATA
	select SYS_ENTR_M
	select SYS_EXIT_M
	select DUOWEN_SPI_FLASH if !DUOWEN_APC
	select DUOWEN_SSI_FLASH if !DUOWEN_APC
	select DUOWEN_APC_INIT if DUOWEN_APC
	select DUOWEN_NOC if DUOWEN_APC
	select DUOWEN_PMA if DUOWEN_APC

config DUOWEN_FSBL
	bool "1-stage programmable bootloader (FSBL)"
	select DUOWEN_BOOT
	select DUOWEN_LOAD_FSBL
	select DUOWEN_BOOT_APC if DUOWEN_APC
	select ARCH_HAS_BOOT_LOAD if !DUOWEN_FSBL_SPI
	select XIP
	select BFM if !DUOWEN_FSBL_SPI
	select SYS_ENTR_M
	select SYS_EXIT_M
	select DUOWEN_DDR
	select DUOWEN_SPI_FLASH
	select DUOWEN_SSI_FLASH
	select DUOWEN_APC_INIT if (!DUOWEN_SBL_LOAD && DUOWEN_APC)
	select DUOWEN_NOC if (!DUOWEN_SBL_LOAD && DUOWEN_APC)
	select DUOWEN_PMA if (!DUOWEN_SBL_LOAD && DUOWEN_APC)

config DUOWEN_BBL
	bool "Berkeley bootloader (BBL)"
	depends DUOWEN_APC
	select DUOWEN_BOOT
	select DUOWEN_LOAD_BBL
	select ARCH_HAS_BOOT_LOAD if !DUOWEN_BBL_SPI
	select XIP if !DUOWEN_BBL_SPI
	select BFM if !DUOWEN_BBL_SPI
	select SYS_ENTR_M
	select SYS_EXIT_M
	select SYS_EXIT_S if SIMULATION
	select SBI
	select SBI_PAYLOAD if !SIMULATION
	select DUOWEN_SPI_FLASH
	select DUOWEN_NOC if !DUOWEN_SBL_LOAD
	select DUOWEN_APC_INIT if !DUOWEN_SBL_LOAD
	select DUOWEN_NOC if !DUOWEN_SBL_LOAD
	select DUOWEN_PMA if !DUOWEN_SBL_LOAD

config DUOWEN_TB
	bool "Test bench"
	select SYS_ENTR_M
	select SYS_EXIT_M
	select SYS_EXIT_S
	select ARCH_HAS_BOOT_LOAD if (DUOWEN_SIM_LOAD || DUOWEN_SBL_LOAD)

endchoice

menu "Bootloader/firmware options"

config DUOWEN_BOOT_APC
	bool "Enable boot from APC"
	depends DUOWEN_APC
	depends DUOWEN_BOOT && (DUOWEN_LOAD_ZSBL || DUOWEN_LOAD_FSBL)
	help
	  Use internal SRAM as RAM for APC program instead of using DDR.
	  This is normally used for APC ZSBL/FSBL configuration.

config DUOWEN_APC_BOOT_HOOK
	bool "Enable boot ROM hooks"
	depends DUOWEN_APC
	select ARCH_HAS_BOOT0
	select ARCH_HAS_BOOT1
	select ARCH_HAS_BOOT2

config DUOWEN_FSBL_SPI
	bool "Build SPI flash resident FSBL"
	depends DUOWEN_FSBL

config DUOWEN_BBL_SPI
	bool "Build SPI flash resident BBL"
	depends DUOWEN_BBL

menuconfig DUOWEN_LOAD
	bool "Enable bootloader"
	depends DUOWEN_LOAD_ZSBL || DUOWEN_LOAD_FSBL
	help
	  Enable ZSBL/FSBL loader function. The firmware will jump to SPI
	  flash or load next image from SSI flash/SDHC card.

if DUOWEN_LOAD

config DUOWEN_LOAD_SPI_FLASH
	bool "Enable load from SPI flash"
	depends DUOWEN_SPI_FLASH
	depends DUOWEN_ZSBL || (DUOWEN_FSBL && DUOWEN_FSBL_SPI)

config DUOWEN_LOAD_SSI_FLASH
	bool "Enable load from SSI flash"
	depends DUOWEN_SSI_FLASH
	select UEFI
	select UEFI_GPT

config DUOWEN_BOOT_STACK
	bool "Enable boot from stack"
	help
	  By default, each bootloader's .text section should be in
	  a different memory region. Enable this option only if the next
	  bootloader resides on SRAM low end, and the region is conflict
	  with the current bootloader. However, if the next bootloader
	  occupies the high end of the SRAM region, which is conflict with
	  the stack of the current bootloader, please do not enable this
	  option.
	  If unsure, say 'N'.

endif

endmenu

menu "Simulation options"

choice
	prompt "Frequency plan"

config DUOWEN_ASIC
	bool "Real ASIC"

config DUOWEN_FPGA
	bool "S2C FPGA"

config DUOWEN_ZEBU
	bool "ZEBU"

endchoice

config DUOWEN_APC_3
	bool "3 VAISRA CPUs"
	depends SMP
	depends DUOWEN_FPGA

config DUOWEN_APC_4
	bool "4 VAISRA CPUs"
	depends SMP
	depends DUOWEN_ZEBU

config DUOWEN_SIM_LOAD
	bool "Enable loading by simulator"

config DUOWEN_SBL_LOAD
	bool "Enable loading by bootloader (ZSBL/FSBL)"
	depends !(DUOWEN_FPGA && DUOWEN_BBL)
	depends !DUOWEN_ZSBL && !DUOWEN_FSBL_SPI && !DUOWEN_BBL_SPI
	default y if DUOWEN_FSBL || DUOWEN_BBL
	help
	  This option is always invisible to ZSBL and visible to non SPI
	  resident FSBL and BBL, TBs. But for the FPGA environment, BBL is
	  booted directly via APC/DDR simulation mode, which also makes
	  this option invisible.

menuconfig DUOWEN_MSG
	bool "Duowen shared message support"
	depends SIMULATION
	help
	  This hardware can only be found in testbench, mostly be used to
	  drive tests and UVM sequences.

endmenu

config DUOWEN_APC_INIT
	bool "Duowen vaisra initialization support"
	depends DUOWEN_APC

config DUOWEN_PMA
	bool "Duowen physical memory attributes (PMA) support"
	depends DUOWEN_APC
	select VAISRA_PMA

menuconfig DUOWEN_NOC
	bool "Duowen network on chip (NoC) support"
	depends DUOWEN_APC
	select NCORE
	help
	  NoC driver is required by FSBL or BBL before booting into Linux.

menuconfig DUOWEN_UART
	bool "Duowen UART controller support"
	select DW_UART

if DUOWEN_UART

endif

menuconfig DUOWEN_TMR
	bool "Duowen global timer controller (TMR) support"
	help
	  TMR hardware is in the AO clock/power domain, it should be used
	  as boot TSC.

if DUOWEN_TMR

config DUOWEN_TMR_CRCNTL_INIT
	bool "Use raw CRCNTL APIs to enable and reset"
	help
	  By default, DUOWEN_TMR driver uses clock tree framework driver
	  to control boot TMR (normally timer3) CLK_EN/SW_RST. While
	  this option allows to use raw CRCNTL APIs instead.
	  If unsure, say 'N'.

endif

menuconfig CRCNTL
	bool "Duowen clock/reset controller (CRCNTL) support"
	select DW_PLL5GHZ_TSMC12FFC if DUOWEN_ASIC
	select CRCNTL_MUX if !DUOWEN_FPGA

if CRCNTL

config CRCNTL_MUX
	bool "Enable clock multiplexing support"
	depends !DUOWEN_FPGA

config CRCNTL_TRACE
	bool "Enable clock tree enabling/disabling trace logs"
	depends EXPERIMENTAL

endif

menuconfig DUOWEN_I2C
	bool "Duowen I2C master controller support"
	depends I2C_MASTER
	select DW_I2C

if DUOWEN_I2C

endif

menuconfig DUOWEN_SPI_FLASH
	bool "Duowen SPI flash support"
	select MATH_DIV32
	help
	  The DUOWEN SoC contains a random accessible SPI controller that
	  is able to convert generic SPI NOR flashes into random accessible
	  ROM.

if DUOWEN_SPI_FLASH

choice
	prompt "Divider length"
	default DUOWEN_FLASH_DIVIDER_16

config DUOWEN_FLASH_DIVIDER_8
        bool "8-bit"

config DUOWEN_FLASH_DIVIDER_16
        bool "16-bit"

config DUOWEN_FLASH_DIVIDER_24
        bool "24-bit"

config DUOWEN_FLASH_DIVIDER_32
        bool "32-bit"

endchoice

choice
	prompt "SPI select length"
	default DUOWEN_FLASH_SS_8

config DUOWEN_FLASH_SS_8
	bool "8-bit"

config DUOWEN_FLASH_SS_16
        bool "16-bit"

config DUOWEN_FLASH_SS_24
        bool "24-bit"

config DUOWEN_FLASH_SS_32
        bool "32-bit"

endchoice

endif

menuconfig DUOWEN_SSI_FLASH
	bool "Duowen SSI flash support"
	depends SPI_MASTER
	select DW_SSI
	select ARCH_HAS_SSI_FIFO
	select ARCH_HAS_SSI_XFER_32
	select ARCH_HAS_SSI_FRF
	select ARCH_HAS_SSI_SPI
	select ARCH_HAS_SSI_SPI_1WIRE
	select ARCH_HAS_SPIFLASH
	select MTD
	select MEM if COMMAND
	select SPIFLASH_W25Q32
	select STRING_UUID
	help
	  The DUOWN SoC also contains a DW_SSI controller that can be used
	  to interface with the external SSI flashes. However, the
	  controller doesn't support random accessibility.

if DUOWEN_SSI_FLASH

config DUOWEN_SSI_FLASH_FREQ
	int "Duowen SSI flash frequency"
	range 100000 80000000
	default 1000000 if !SIMULATION
	default 8000000 if SIMULATION
	depends EXPERIMENTAL
	help
	  The SPINOR flash uses the "EEPROM read" protocol that the CS
	  should be kept active during the entire transaction. However,
	  the DW_ssi controller automatically inactivates the CS pin when
	  the FIFO is run out. That requires the program to run fast
	  enough to fill data into the SPI FIFO. The CS inactivation can
	  be seen if the SPI transaction period is filled up with less APB
	  transactions (rom/ram/ssi accesses).
	  It's tested that 8MHz is working for the case of "ROM booting
	  SSI" in the simulation environment, for the non-simulation
	  environment, it's preferred to use 1MHz by design.

endif

menuconfig DUOWEN_SD
	bool "Duowen MSHC controller support"
	select DW_MSHC

if MSHC

endif

config DUOWEN_PCIE
	bool "Duowen PCI-Express (PCIe) support"
	select DW_PCIE

if DUOWEN_PCIE

config DUOWEN_PCIE_TEST
	bool "Enable PCIE EP/RC(Root Complex) basic test"
	default n
	help
	  When this option is enabled, basic test on either EP
	  or RC will be implemented, depends on whether PCIE_ROLE_RC
	  is checked

endif

menuconfig DUOWEN_SMMU
	bool "Duowen SMMU controller support"
	select SMMU_MMU500
	help
	  Duowen SMMU is an ARM SMMUv2 like IOMMU hardware, with
	  necessary modifications in order to be used in the RISC-V
	  SoC environment.

if DUOWEN_SMMU

endif

menuconfig DUOWEN_DMA
	bool "Duowen DMA controller support"
	select DW_DMA

if DUOWEN_DMA

endif

menu "Duowen DDR controller/phy support"

choice
	prompt "DDR model"
	default DUOWEN_DDR_512G if DUOWEN_ASIC
	default DUOWEN_DDR_32M if DUOWEN_FPGA
	default DUOWEN_DDR_32M if DUOWEN_ZEBU

config DUOWEN_DDR_32M
	bool "Fake 32M DDR memory model"
	depends DUOWEN_FPGA || DUOWEN_ZEBU

config DUOWEN_DDR_512G
	bool "Real 512G DDR memory"
	depends DUOWEN_ASIC || DUOWEN_ZEBU

config DUOWEN_DDR_16G
	bool "FPGA emulated 16G DDR memory"
	depends DUOWEN_FPGA

endchoice

menuconfig DUOWEN_DDR
	bool "Duowen DDR memory support"
	depends DDR
	select DW_UMCTL2

if DUOWEN_DDR

config DUOWEN_DDR_SPD_BUS_NUM
	int "I2C Bus (Master) Number for DDR SPDs"
	default 0
	depends I2C && I2C_MASTER

config DUOWEN_DDR_SPD_COUNT
	int "Count of DDR SPDs (DIMMs)"
	default 2
	range 1 8
	depends I2C && I2C_MASTER

endif

endmenu

endmenu

endif
