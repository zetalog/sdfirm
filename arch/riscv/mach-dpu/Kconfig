#
# For a description of the syntax of this configuration file,
# see scripts/kbuild/config-language.txt.
#

if ARCH_DPU

menu "Smart Core DPU board options"

choice
	prompt "IMC CPU type"
	default DPU_CV32E40P

config DPU_CV32E40P
	bool "RI5CY"
	select CPU_CV32E40P

config DPU_CVA6
	bool "Ariane"
	select CPU_CVA6

endchoice

config DPU_BOOT
	bool

config DPU_FIRM
	bool

config DPU_LOAD_ZSBL
	bool

config DPU_LOAD_FSBL
	bool
	select DPU_DDR

config DPU_LOAD_BBL
	bool

choice
	prompt "Program type"

config DPU_BOOT_ROM
	bool "0-stage boot ROM bootloader (ZSBL)"
	select DPU_BOOT
	select DPU_LOAD_ZSBL
	select XIP
	select LOAD_DATA
	select SYS_ENTR_M
	select SYS_EXIT_M
	select DPU_TCSR
	select DPU_SPI_FLASH
	select DPU_SSI_FLASH

config DPU_BOOT_RAM
	bool "0-stage boot RAM bootloader (ZSBL)"
	select ARCH_HAS_BOOT_LOAD
	select DPU_BOOT
	select DPU_LOAD_ZSBL
	select XIP
	select BFM
	select SYS_ENTR_M
	select SYS_EXIT_M
	select SYS_EXIT_S if DPU_CVA6
	select SYS_EXIT_U
	select DPU_TCSR
	select DPU_SPI_FLASH
	select DPU_SSI_FLASH

config DPU_BOOT_SPI_FLASH
	bool "0-stage/1-stage SPINOR bootloader (ZSBL/FSBL)"
	select ARCH_HAS_BOOT_LOAD
	select DPU_BOOT
	select DPU_LOAD_ZSBL
	select DPU_LOAD_FSBL
	select XIP
	select LOAD_DATA
	select SYS_ENTR_M
	select SYS_EXIT_M
	select DPU_TCSR
	select DPU_DDR
	select DPU_SPI_FLASH
	select DPU_SSI_FLASH

config DPU_BOOT_SSI_FLASH
	bool "1-stage SSI flash bootloader (FSBL)"
	select ARCH_HAS_BOOT_LOAD
	select DPU_BOOT
	select DPU_LOAD_FSBL
	select XIP
	select SYS_ENTR_M
	select SYS_EXIT_M
	select DPU_TCSR
	select DPU_DDR
	select DPU_SPI_FLASH
	select DPU_SSI_FLASH

config DPU_BOOT_DDR
	bool "Berkeley bootloader (BBL)"
	select ARCH_HAS_BOOT_LOAD
	select DPU_BOOT
	select DPU_LOAD_BBL
	select SYS_ENTR_M
	select SYS_EXIT_M
	select SBI
	select SBI_PAYLOAD
	select DPU_SPI_FLASH
	select DPU_SSI_FLASH

config DPU_FIRM_DDR
	bool "Runtime target firmware (DPU-FW)"
	select ARCH_HAS_BOOT_LOAD
	select DPU_FIRM
	select XIP
	select BFM
	select SYS_ENTR_M
	select SYS_EXIT_M
	select SYS_EXIT_S if DPU_CVA6
	select SYS_EXIT_U

endchoice

menu "Bootloader/Firmware options"

config DPU_LOAD
	bool "Enable bootloader"
	depends DPU_LOAD_ZSBL || DPU_LOAD_FSBL

if DPU_LOAD

config DPU_LOAD_SPI_FLASH
	bool "Enable load from SPI flash"
	depends DPU_SPI_FLASH

config DPU_BOOT_ADDR
	hex "Bootloader SPI flash jump address"
	range 0x00000000 0x01E00000
	depends DPU_LOAD_SPI_FLASH
	default 0x00000080

config DPU_LOAD_SSI_FLASH
	bool "Enable load from SSI flash"
	depends DPU_SSI_FLASH
	select UEFI
	select UEFI_GPT

config DPU_BOOT_STACK
	bool "Enable boot from stack"
	help
	  By default, each bootloader's .text section should be in
	  a different memory region. Enable this option only if the next
	  bootloader resides on SRAM low end, and the region is conflict
	  with the current bootloader. However, if the next bootloader
	  occupies the high end of the SRAM region, which is conflict with
	  the stack of the current bootloader, please do not enable this
	  option.
	  If unsure, say 'N'.

endif

config DPU_FIRM_SIZE
	hex "Firmware size"
	depends DPU_FIRM

config DPU_BOOT_PE
	bool "DPU process elements (PE)"
	depends DPU_BOOT

config DPU_BOOT_VPU
	bool "DPU vision processor unit (VPU)"
	depends DPU_BOOT

endmenu

menu "Simulation options"

if SIMULATION

config DPU_SIM_CLK
	bool "Allow disabling clock framework"
	help
	  On simulation environments, CLK can be opt-off if no need to
	  configure any clocks (forced in test benches).

config DPU_SIM_GPIO_IRQ
	bool "Enable GPIO IRQ testing framework"
	depends DPU_GPIO && SYS_IRQ

config DPU_SIM_SSI_IRQ
	bool "Enable SSI IRQ testing support"
	depends DPU_SSI_FLASH && SYS_IRQ

config DPU_SIM_DDR_BOOT
	bool "Use DDR model for DDR1 to boot"
	help
	  The special boot mode is used to perform OS verification in the
	  simulation environment. When it is configured, DDR1 becomes a
	  RAM model, and sizes 512MB. The CPU will boot the the start
	  address of DDR1 (0x08_0000_0000).

endif

endmenu

menuconfig DPU_TCSR
	bool "Top control and status registers (TCSR) support"
	select STRING_STRTOULL if COMMAND

if DPU_TCSR

config DPU_TCSR_LOW_POWER
	bool "Enable bus low power support"

config DPU_TCSR_SIM_FINISH
	bool "Enable simulation finish support"
	depends SIMULATION
	help
	  In simulation environment, enabling this allows to shutdown
	  VCS simulation.

endif

menuconfig DPU_PLL
	bool "DPU PLL and clock/reset support"
	select DW_PLL5GHZ_TSMC12FFC if !DPU_PLL_BYPASS_PLL
	select MATH_DIV32

if DPU_PLL

config DPU_PLL_FREQPLAN_PE
	bool "Enable 7-gear PE frequency plan support"
	help
	  Frequency plan is only prepared for DDR 7-gear. Enable this
	  option to enable PE frequency plan support to match DDR gears.
	  If unsure, say 'N'.

config DPU_PLL_FREQPLAN_PE_HISPEED
	bool "Enable high speed test (2GHz)"
	depends SIMULATION && DPU_PLL_FREQPLAN_PE

config DPU_PLL_FREQPLAN_BUS
	bool "Enable 7-gear bus frequency plan support"
	help
	  Frequency plan is only prepared for DDR 7-gear. Enable this
	  option to enable bus frequency plan support to match DDR gears.
	  If unsure, say 'N'.

config DPU_PLL_BYPASS_PLL
	bool "Allow disabling PLL driver"
	depends SIMULATION
	help
	  On simulation environnments, PLL can be opt-off if no need to
	  configure any PLLs (forced in test benches). Due to enabling of
	  clock framework, some APIs that obtain clock frequencies can
	  still work in this configuration.

endif

menuconfig DPU_GPIO
	bool "DPU GPIO controller support"
	select DW_GPIO

if DPU_GPIO

endif

menuconfig DPU_TMR
	bool "DPU RISC-V timer support"
	select DPU_TMR_FIRQ if RISCV_VIRQ
	select ARCH_HAS_SBI_TIMER

if DPU_TMR

config DPU_TMR_FIRQ
	bool "Enable extended fast interrupt support"
	depends RISCV_VIRQ
	select RI5CY_FIRQ

config DPU_TMR_CMP_CONST
	bool "Enable constant compare counter support"
	depends SIMULATION
	help
	  Can fixup a shortened timeout value to make RTL simulation
	  faster.

config DPU_TMR_CMP_CONST_TOUT
	hex "Constant compare counter value"
	depends DPU_TMR_CMP_CONST
	range 0x1000 0x10000
	default 0x4000
	help
	  Use the fixed value to be added to the CNT, and set to the
	  CMP register.

endif

menuconfig DPU_PLIC
	bool "DPU RISC-V PLIC support"
	select PLIC
	select DPU_PLIC_FIRQ if RISCV_VIRQ

if DPU_PLIC

config DPU_PLIC_FIRQ
	bool "Enable extended fast interrupt support"
	depends RISCV_VIRQ
	select RI5CY_FIRQ

endif

menuconfig DPU_UART
	bool "DPU UART controller support"
	select DW_UART

if DPU_UART

config DPU_UART_VIP
	bool "Enable DPU UART simulation model support"
	depends SIMULATION
	default y
	help
	  When this is selected, the UART baudrate generator frequency will
	  be APB_CLK/16, making things happening quicker when an UART slave
	  VIP is connected. In case your are using a UART master DPI VIP,
	  selecting this is safe as the VIP cares no about the baudrate.
	  If unsure, say 'Y'.

endif

menuconfig DPU_I2C
	bool "DPU I2C master support"
	select DW_I2C
	depends I2C_MASTER

menuconfig DPU_SPI_FLASH
	bool "DPU SPI flash support"
	select MATH_DIV32
	help
	  The DPU SoC contains a random accessible SPI controller that is
	  able to convert generic SPI NOR flashes into random accessible
	  ROM.

if DPU_SPI_FLASH

choice
	prompt "Divider length"
	default DPU_FLASH_DIVIDER_16

config DPU_FLASH_DIVIDER_8
	bool "8-bit"

config DPU_FLASH_DIVIDER_16
	bool "16-bit"

config DPU_FLASH_DIVIDER_24
	bool "24-bit"

config DPU_FLASH_DIVIDER_32
	bool "32-bit"

endchoice

choice
	prompt "SPI select length"
	default DPU_FLASH_SS_8

config DPU_FLASH_SS_8
	bool "8-bit"

config DPU_FLASH_SS_16
	bool "16-bit"

config DPU_FLASH_SS_24
	bool "24-bit"

config DPU_FLASH_SS_32
	bool "32-bit"

endchoice

endif

menuconfig DPU_SSI_FLASH
	bool "DPU SSI flash support"
	depends SPI_MASTER
	select DW_SSI
	select ARCH_HAS_SSI_FIFO
	select ARCH_HAS_SSI_XFER_32
	select ARCH_HAS_SSI_FRF
	select ARCH_HAS_SSI_SPI
	select ARCH_HAS_SSI_SPI_1WIRE
	select ARCH_HAS_SPIFLASH
	select MTD
	select MEM if COMMAND
	select SPIFLASH_W25Q32
	select STRING_UUID
	help
	  The DPU SoC also contains a DW_SSI controller that can be used
	  to interface with the external SSI flashes. However, the
	  controller doesn't support random accessibility.

if DPU_SSI_FLASH

config DPU_SSI_FLASH_FREQ
	int "DPU SSI flash frequency"
	range 100000 80000000
	default 1000000 if !SIMULATION
	default 8000000 if SIMULATION
	depends EXPERIMENTAL
	help
	  The SPINOR flash uses the "EEPROM read" protocol that the CS
	  should be kept active during the entire transaction. However,
	  the DW_ssi controller automatically inactivates the CS pin when
	  the FIFO is run out. That requires the program to run fast
	  enough to fill data into the SPI FIFO. The CS inactivation can
	  be seen if the SPI transaction period is filled up with less APB
	  transactions (rom/ram/ssi accesses).
	  It's tested that 8MHz is working for the case of "ROM booting
	  SSI" in the simulation environment, for the non-simulation
	  environment, it's preferred to use 1MHz by design.

endif

menuconfig DPU_DDR
	bool "DPU DDR controller/phy support"
	select DW_UMCTL2
	select MATH_DIV32

if DPU_DDR

config DPU_DDR_SPD_BUS_NUM
	int "I2C Bus (Master) Number for DDR SPDs"
	depends I2C && I2C_MASTER
	default 0

config DPU_DDR_SPD_COUNT
	int "Count of DDR SPDs (DIMMs)"
	default 2
	range 1 8
	depends I2C && I2C_MASTER

endif

menuconfig DPU_PCI_SUBSYS
	bool "DPU PCIe subsystem support"
	select DW_PCIE

if DPU_PCI_SUBSYS

config DPU_PCIE_TEST
	bool "Enable PCIE EP/RC(Root Complex) basic test"
	default n
	help
	  When this option is enabled, basic test on either EP
	  or RC will be implemented, depends on whether PCIE_ROLE_RC
	  is checked	

endif

endmenu

endif
