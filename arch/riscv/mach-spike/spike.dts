#include <target/arch.h>

/dts-v1/;

/memreserve/ RAM_BASE 0x02000000;

/ {
	#address-cells = <2>;
	#size-cells = <2>;
	compatible = "ucbbar,spike-bare-dev";
	model = "ucbbar,spike-bare";
	chosen {
#ifdef CONFIG_SPIKE_UART_HVC
		bootargs = "console=hvc0 earlycon=sbi rdinit=/sdfirm_init";
#else
#ifdef CONFIG_EFI_BUILTIN
		linux,uefi-system-table = <0x00 0x00>;
		linux,uefi-mmap-start = <0x00 0x00>;
		linux,uefi-mmap-size = <0x00>;
		linux,uefi-mmap-desc-size = <0x30>;
		linux,uefi-mmap-desc-ver = <0x01>;
#endif

		stdout-path = &uart;
		bootargs = "console=ttyS0 earlycon rdinit=/sdfirm_init";
#endif
	};
	cpus {
		#address-cells = <1>;
		#size-cells = <0>;
		timebase-frequency = <10000000>;

		cpu0: cpu@0 {
			device_type = "cpu";
			reg = <0>;
			status = "okay";
			compatible = "riscv";
			riscv,isa = "rv64imafdch";
			mmu-type = "riscv,sv57";
#ifdef CONFIG_RISCV_PMP
			riscv,pmpregions = <16>;
			riscv,pmpgranularity = <4>;
#endif
			clock-frequency = <1000000000>;
			cpu0_intc: interrupt-controller {
				#address-cells = <2>;
				#interrupt-cells = <1>;
				interrupt-controller;
				compatible = "riscv,cpu-intc";
			};
		};
#ifdef CONFIG_SMP
#if CONFIG_SPIKE_SMP_CPUS > 1
		cpu1: cpu@1 {
			device_type = "cpu";
			reg = <1>;
			status = "okay";
			compatible = "riscv";
			riscv,isa = "rv64imafdch";
			mmu-type = "riscv,sv57";
#ifdef CONFIG_RISCV_PMP
			riscv,pmpregions = <16>;
			riscv,pmpgranularity = <4>;
#endif
			clock-frequency = <1000000000>;
			cpu1_intc: interrupt-controller {
				#address-cells = <2>;
				#interrupt-cells = <1>;
				interrupt-controller;
				compatible = "riscv,cpu-intc";
			};
		};
#endif
#if CONFIG_SPIKE_SMP_CPUS > 2
		cpu2: cpu@2 {
			device_type = "cpu";
			reg = <2>;
			status = "okay";
			compatible = "riscv";
			riscv,isa = "rv64imafdch";
			mmu-type = "riscv,sv57";
#ifdef CONFIG_RISCV_PMP
			riscv,pmpregions = <16>;
			riscv,pmpgranularity = <4>;
#endif
			clock-frequency = <1000000000>;
			cpu2_intc: interrupt-controller {
				#address-cells = <2>;
				#interrupt-cells = <1>;
				interrupt-controller;
				compatible = "riscv,cpu-intc";
			};
		};
#endif
#if CONFIG_SPIKE_SMP_CPUS > 3
		cpu3: cpu@3 {
			device_type = "cpu";
			reg = <3>;
			status = "okay";
			compatible = "riscv";
			riscv,isa = "rv64imafdch";
			mmu-type = "riscv,sv57";
#ifdef CONFIG_RISCV_PMP
			riscv,pmpregions = <16>;
			riscv,pmpgranularity = <4>;
#endif
			clock-frequency = <1000000000>;
			cpu3_intc: interrupt-controller {
				#address-cells = <2>;
				#interrupt-cells = <1>;
				interrupt-controller;
				compatible = "riscv,cpu-intc";
			};
		};
#endif
#endif
	};
	memory@80000000 {
		device_type = "memory";
		reg = <0x0 MEM1_BASE 0x0 MEM1_SIZE>;
	};
	soc {
		#address-cells = <2>;
		#size-cells = <2>;
		compatible = "ucbbar,spike-bare-soc", "simple-bus";
		ranges;

		clint@2000000 {
			compatible = "riscv,clint0";
			interrupts-extended = <
				&cpu0_intc 3 &cpu0_intc 7
#ifdef CONFIG_SMP
#if CONFIG_SPIKE_SMP_CPUS > 1
				&cpu1_intc 3 &cpu1_intc 7
#endif
#if CONFIG_SPIKE_SMP_CPUS > 2
				&cpu2_intc 3 &cpu2_intc 7
#endif
#if CONFIG_SPIKE_SMP_CPUS > 3
				&cpu3_intc 3 &cpu3_intc 7
#endif
#endif
			>;
			reg = <0x0 0x2000000 0x0 0xc0000>;
		};
#ifdef CONFIG_SPIKE_PLIC
		plic: plic@c000000 {
			compatible = "riscv,plic0";
			#address-cells = <2>;
			interrupts-extended = <
				&cpu0_intc 0xb &cpu0_intc 0x9
#ifdef CONFIG_SMP
#if CONFIG_SPIKE_SMP_CPUS > 1
				&cpu1_intc 0xb &cpu1_intc 0x9
#endif
#if CONFIG_SPIKE_SMP_CPUS > 2
				&cpu2_intc 0xb &cpu2_intc 0x9
#endif
#if CONFIG_SPIKE_SMP_CPUS > 3
				&cpu3_intc 0xb &cpu3_intc 0x9
#endif
#endif
			>;
			reg = <0x0 0xc000000 0x0 0x1000000>;
			riscv,ndev = <0x1f>;
			riscv,max-priority = <15>;
			#interrupt-cells = <1>;
			interrupt-controller;
		};
#endif
#ifdef CONFIG_SPIKE_8250
		uart: ns16550@10000000 {
			compatible = "ns16550a";
			clock-frequency = <10000000>;
			interrupt-parent = <&plic>;
			interrupts = <1>;
			reg = <0x0 0x10000000 0x0 0x100>;
			reg-shift = <0x0>;
			reg-io-width = <0x1>;
		};
#endif
	};
#ifdef CONFIG_SPIKE_HTIF
	htif {
		compatible = "ucb,htif0";
	};
#endif
};
