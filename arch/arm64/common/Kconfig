# QDF2400
config CPU_QDF2400
	bool
	select CPU_64v8_1
	help
	  1 Cortex-A53 (IMC) + many Cortex-A57 (APC).

# VExpress
config CPU_VEXPRESS
	bool
	select CPU_64v8_1
	help
	  4 Cortex-A53.

# Figure out what processor architecture version we should be using.
# This defines the compiler instruction set which depends on the machine type.

config CPU_64v7
	bool
	select CPU_64v7_VE

# Virtualization extension
config CPU_64v7_VE
	bool
	depends CPU_64v7

config CPU_64v8
	bool
	select CPU_64v7
	select CPU_64v8_TZ

config CPU_64v8_0
	bool
	select CPU_64v8

config CPU_64v8_1
	bool
	select CPU_64v8_0
	select CPU_64v8_1_ATOMICS
	select CPU_64v8_1_SIMD
	select CPU_64v8_1_LOR
	select CPU_64v8_1_HPD
	select CPU_64v8_1_PAN
	select CPU_64v8_1_VHE

config CPU_64v8_2
	bool
	select CPU_64v8_1
	select CPU_64v8_RAS
	select CPU_64v8_2_ATS1E1
	select CPU_64v8_2_UAO
	select CPU_64v8_2_DCPoP
	select CPU_64v8_2_TTCNP
	select CPU_64v8_2_TTS2UXN
	select CPU_64v8_2_IESB

# TrustZone
config CPU_64v8_TZ
	bool
	depends CPU_64v8

# Reliability Availability and Serviceability Extension
config CPU_64v8_RAS
	bool
	depends CPU_64v8

# CAS atomics support
config CPU_64v8_1_ATOMICS
	bool
	depends CPU_64v8_1

config CPU_64v8_1_SIMD
	bool
	depends CPU_64v8_1

# Limited ordering regions
config CPU_64v8_1_LOR
	bool
	depends CPU_64v8_1

# Hierarchical permission disable
config CPU_64v8_1_HPD
	bool
	depends CPU_64v8_1

# Hardware management of Access flag and Dirty state
config CPU_64v8_1_TTHM
	bool
	depends CPU_64v8_1

# Privileged access never
config CPU_64v8_1_PAN
	bool
	depends CPU_64v8_1

# 16-bit VMID
config CPU_64v8_1_VMID16
	bool
	depends CPU_64v8_1

# Virtualization Host Extensions
config CPU_64v8_1_VHE
	bool
	depends CPU_64v8_1

# ARMv8.1 PMU Extension
config CPU_64v8_1_PMU
	bool
	depends CPU_64v8_1

# Statistical Profiling Extension
config CPU_64v8_2_SPE
	bool
	select CPU_64v8_2

# Scalable Vector Extension
config CPU_64v8_2_SVE
	bool
	select CPU_64v8_2

config CPU_64v8_2_ATS1E1
	bool
	depends CPU_64v8_2

# SIMD Dot Product
config CPU_64v8_2_DotProd
	bool
	depends CPU_64v8_2

# Half-precision floating-point data processing
config CPU_64v8_2_FP16
	bool
	depends CPU_64v8_2

# Load/Store Multiple atomicity and ordering controls
config CPU_64v8_2_LSMAOC
	bool
	depends CPU_64v8_2

# PSTATE override of Unprivileged Load/Store
config CPU_64v8_2_UAO
	bool
	depends CPU_64v8_2

# Data cache clean to Point of Persistence
config CPU_64v8_2_DCPoP
	bool
	depends CPU_64v8_2

# VMID-aware PIPT instruction cache
config CPU_64v8_2_VPIPT
	bool
	depends CPU_64v8_2

# Translation table page-based hardware attributes
config CPU_64v8_2_TTPBHA
	bool
	depends CPU_64v8_2

# Large VA (LVA) support
config CPU_64v8_2_LVA
	bool
	depends CPU_64v8_2

# Large PA (LPA) support
config CPU_64v8_2_LPA
	bool
	depends CPU_64v8_2

# Translation table Common not private translations
config CPU_64v8_2_TTCNP
	bool
	depends CPU_64v8_2

# Translation table stage 2 Unprivileged Execute-never
config CPU_64v8_2_TTS2UXN
	bool
	depends CPU_64v8_2

config CPU_64v8_2_DEBUG
	bool
	depends CPU_64v8_2

# PC Sample-based Profiling
config CPU_64v8_2_PC_SAMPLE
	bool
	depends CPU_64v8_2

# Implicit error synchronization event
config CPU_64v8_2_IESB
	bool
	depends CPU_64v8_2

config CPU_BIG_ENDIAN
	bool "Build big-endian kernel"
	depends on ARCH_SUPPORTS_BIG_ENDIAN
	select ARCH_IS_BIG_ENDIAN
	help
	  Say Y if you plan on running a kernel in big-endian mode.

menu "CPU architecture options"

config ARM64_ATOMIC_CAS
	bool "Enable compare and exchange (CAS) atomic support"
	depends CPU_64v8_1_ATOMICS

choice
	prompt "Type of atomic counter"

config ARM64_ATOMIC_COUNT_32
	bool "signed 32-bit"
	select ARCH_HAS_BITS_PER_UNIT_32

config ARM64_ATOMIC_COUNT_64
	bool "signed 64-bit"
	select ARCH_HAS_BITS_PER_UNIT_64
	depends !32BIT

endchoice

endmenu

choice
	prompt "System security (TrustZone)"
	default TZ_NORMAL

config TZ_SECURE
	bool "Secure world" if CPU_64v8_TZ

config TZ_NORMAL
	bool "Normal world"

endchoice

choice
	prompt "System priviledge"
	default SYS_KERNEL if TZ_NORMAL
	default SYS_MONITOR if TZ_SECURE

# Disabled for the firmware system
#config SYS_USER
#	bool "User mode"

config SYS_KERNEL
	bool "Privileged (kernel) mode"
	select SYS_GUEST if !SYS_HYPERVISOR

config SYS_MONITOR
	bool "Monitor mode"
	depends TZ_SECURE
	depends !BOOTLOADER

endchoice

config SYS_GUEST
	bool
	depends !SYS_HYPERVISOR && SYS_KERNEL

menuconfig SYS_HYPERVISOR
	bool "Hypervisor optimization support"
	depends TZ_NORMAL && SYS_KERNEL
	depends CPU_64v7_VE
	depends !BOOTLOADER

if SYS_HYPERVISOR

config SYS_HOST
	bool "Host OS optimization support"
	depends CPU_64v8_1_VHE

endif

if BOOTLOADER

config ARCH_HAS_BOOT0
	bool

endif

config PSCI
	bool "Power State Coordination Interface (PSCI) support"
	depends SYS_MONITOR || BOOT_LINUX

choice
	prompt "Interrupt controller"

config GIC
	bool "GIC"
	depends on CPU_64v8 && !SYS_NOIRQ
	select ARCH_HAS_IRQC
	help
	  The GIC architecture describes an interrupt controller for use with
	  one or more processors that comply with ARM A or R architecture
	  profiles.

endchoice

if GIC

menu "Generic Interrupt Controller (GIC) support"

config ARCH_HAS_GICv2
	bool

config ARCH_HAS_GICv3
	bool

choice
	prompt "GIC architecture"

config GICv2
	bool "GICv2"
	depends ARCH_HAS_GICv2
	help
	  GIC v2 (IHI0028B) architecture specification.

config GICv3
	bool "GICv3"
	depends ARCH_HAS_GICv3
	help
	  GIC v3 (IHI0069D) architecture specification.

endchoice

config GICv2_IRQ_NS
	bool "Enable non-secure IRQ"
	depends GICv2

config GIC_IRQ_GROUPING
	bool "Interrupt grouping"
	depends on ARM_TRUSTZONE
	help
	  Interrupt grouping is present in GICv2 implementations and in GICv1
	  implementations that include the GIC security extensions.

endmenu

endif

menuconfig VMSA
	bool "Virtual Memory System Architecture (VMSA) support"
	select ARCH_HAS_MMU_4K	# bits = level * 9 + 12
	select ARCH_HAS_MMU_16K	# bits = level * 11 + 14
	select ARCH_HAS_MMU_64K	# bits = level * 13 + 16
	select ARCH_HAS_MMU_3L if MMU_4K_PAGE && VMSA_VA_4GB	# 32-bits
	select ARCH_HAS_MMU_3L if MMU_4K_PAGE && VMSA_VA_64GB	# 36-bits
	select ARCH_HAS_MMU_4L if MMU_4K_PAGE && VMSA_VA_1TB	# 40-bits
	select ARCH_HAS_MMU_4L if MMU_4K_PAGE && VMSA_VA_16TB	# 44-bits
	select ARCH_HAS_MMU_4L if MMU_4K_PAGE && VMSA_VA_256TB	# 48-bits
	select ARCH_HAS_MMU_2L if MMU_16K_PAGE && VMSA_VA_4GB	# 32-bits
	select ARCH_HAS_MMU_2L if MMU_16K_PAGE && VMSA_VA_64GB	# 36-bits
	select ARCH_HAS_MMU_3L if MMU_16K_PAGE && VMSA_VA_1TB	# 40-bits
	select ARCH_HAS_MMU_3L if MMU_16K_PAGE && VMSA_VA_16TB	# 44-bits
	select ARCH_HAS_MMU_4L if MMU_16K_PAGE && VMSA_VA_256TB	# 48-bits
	select ARCH_HAS_MMU_2L if MMU_64K_PAGE && VMSA_VA_4GB	# 32-bits
	select ARCH_HAS_MMU_2L if MMU_64K_PAGE && VMSA_VA_64GB	# 36-bits
	select ARCH_HAS_MMU_2L if MMU_64K_PAGE && VMSA_VA_1TB	# 40-bits
	select ARCH_HAS_MMU_3L if MMU_64K_PAGE && VMSA_VA_16TB	# 44-bits
	select ARCH_HAS_MMU_3L if MMU_64K_PAGE && VMSA_VA_256TB	# 48-bits
	select ARCH_HAS_MMU_3L if MMU_64K_PAGE && VMSA_VA_4PB	# 52-bits
	select VMSA_VA_2_RANGES if MMU_PAGE_OFFSET

if VMSA

choice
	prompt "Maximum input address size"
	default VMSA_VA_256TB
	help
	  This option defines stage 1 translation input address size.

config VMSA_VA_4GB
	bool "<=4GB"

config VMSA_VA_64GB
	bool "<=64GB"

config VMSA_VA_1TB
	bool "<=1TB"

config VMSA_VA_16TB
	bool "<=16TB"

config VMSA_VA_256TB
	bool "<=256TB"

config VMSA_VA_4PB
	bool "<=4PB"
	depends MMU_64K_PAGE && CPU_64v8_2_LVA

endchoice

config VMSA_ADDRESS_TAGGING
	bool "Address tagging support"

config VMSA_VA_2_RANGES
	bool "Two VA ranges support"
	depends (SYS_KERNEL && !SYS_HYPERVISOR) || SYS_HOST
	depends MMU_PAGE_OFFSET

config VMSA_PHYS_OFFSET
	hex "Physical memory start address"
	default 0

endif

menu "External Debug support"

config ARM_DCC
	bool "Debug Communications Channel (DCC) support"
	depends UART || DEBUG_PRINT || CONSOLE
	select ARCH_HAS_UART
	help
	  The Debug Communications Channel, DCC, is a channel for passing
	  data between the PE and an external agent, such as a debugger.
	  The DCC provides a communications channel between:
	  * An external debugger, described as the debug host.
	  * The debug implementation on the PE, described as the debug
	    target.
	  The DCC can be used:
	  * As a 32-bit full-duplex channel.
	  * As a 64-bit half-duplex channel.
	  The DCC is an essential part of Debug state operation and can
	  also be used in Non-debug state.

endmenu

menuconfig PMU
	bool "Performance Monitor Unit (PMU) support"
	depends on CPU_64v8
	select ARCH_HAS_PMU

if PMU

choice
	prompt "PMU architecture"
	default PMUv3

config PMUv3
	bool "PMUv3"

endchoice

endif

menu "ARM CoreLink peripheral support"

endmenu

config CPU_BIG_ENDIAN
	bool "Build big-endian kernel"
	depends on ARCH_SUPPORTS_BIG_ENDIAN
	select ARCH_IS_BIG_ENDIAN
	help
	  Say Y if you plan on running a kernel in big-endian mode.
	  Note that your board must be properly built and your board
	  port must properly enable any big-endian related features
	  of your chipset/board/processor.
