#
# MMC Devices
#

config ARCH_HAS_MMC
	bool

config ARCH_HAS_SD
	bool

config ARCH_HAS_UHSII
	bool

config ARCH_HAS_EMMC
	bool

config ARCH_HAS_SDHC
	bool

config MMC_CORE
	bool
	select CRC16_CCITT

if ARCH_HAS_MMC || ARCH_HAS_SD

menuconfig MMCSD
	bool "MMC/SD/SDIO card support"
	select STRING_HEXDUMP if COMMAND

if MMCSD

config MMC_MAX_SLOTS
	int "Number of memory card slots (1~8)"
	range 1 8
	default 1

config MMC_MAX_CARDS
	int "Number of memory cards (1~8)"
	range 1 8
	default 1

config MMC_WIDTH
	bool "Enable bus width selection support"

config MMC_CID_ALL_FIELDS
	bool "Enable storing of all CID register fields"
	help
	  A card is identified by its CID number. This method requires the
	  card to have an unique CID number. To ensure uniqueness of CIDs
	  the CID register contains 24 bits (MID and OID fields) which are
	  defined by the MMCA.
	  This option needs to be enabled in order to have more CID
	  register fields saved by sdfirm during rumtime. Be aware that
	  these fields are still used for debugging purpose and not for
	  improving the uniqueness of CIDs.
	  If unsure, say 'N'.

config MMC_DEBUG
	bool "MMC debug message support"
	depends DEBUG_PRINT || CONSOLE
	select CONSOLE_DEBUG

if MMC_DEBUG

config MMC_DEBUG_DATA
	bool "MMC full DATA line debug message support"
	help
	  By default, only necessary data line communications (e.x., SCR
	  and etc.) are dumped as debugging message to avoid flooding
	  consoles. Enabling this allows developer to dump full data line
	  contents.

endif

choice
	prompt "Physical layer"

config MMC
	bool "Multimedia card (MMC)"
	depends ARCH_HAS_MMC
	select MMC_CORE

config SD
	bool "Secure digital (SD) card"
	depends ARCH_HAS_SD
	select MMC_CORE

endchoice

if MMC

config MMC_ASYNC
	bool "Enable asynchronous mode support"
	help
	  By default, do not use handshake signals (STB, ACK) but polling
	  the state (busy/not busy), which is known as synchronous mode.
	  This option allows sdfirm to enable asynchronous mode via the
	  handshake signals.
	  If unsure, say 'N'.

config MMC_SPI
	bool "SPI mode support"

endif

if SD

config SD_PHY_VERSION
	int "SD physical version"
	range 1 6
	default 6

choice
	prompt "Capacity"

config SD_SDSC
	bool "Standard (0~2GB)"

config SD_SDHC
	bool "High (2GB~32GB)"

config SD_SDXC
	bool "Extended (32GB~)"

endchoice

config SD_LEGACY_ONLY
	bool "Enable legacy only mode support"
	help
	  This option is useful for programs where PLL drivers are not
	  used for acceleration.
	  If unsure, say 'N'.

config SD_SPI
	bool "SPI bus protocol support"
	select MMC_SPI

if SD_SPI

endif

config UHSII
	bool "UHS-II bus protocol support"
	depends ARCH_HAS_UHSII

if UHSII

config UHSII_CTS
	bool "Enable command issuing during CTS"

config UHSII_TID
	bool "Enable support of TID check"

endif

menuconfig SDHC
	bool "Secure Digital Host Controller (SDHC) support"
	select ARCH_HAS_SDHC
	select BIT_FLS32

if SDHC

config SDHC_SPEC_100
	bool

config SDHC_SPEC_200
	bool
	select SDHC_SPEC_100

config SDHC_SPEC_300
	bool
	select SDHC_SPEC_200

config SDHC_SPEC_400
	bool
	select SDHC_SPEC_300

config SDHC_SPEC_410
	bool
	select SDHC_SPEC_400

config SDHC_SPEC_420
	bool
	select SDHC_SPEC_410

config SDHC_SPEC_500
	bool
	select SDHC_SPEC_420

config SDHC_SD
	bool "SD mode support"

config SDHC_EMMC
	bool "eMMC mode support"

config SDHC_UHSI
	bool "UHS-I mode support"
	select SDHC_SD

config SDHC_UHSII
	bool "UHS-II mode support"

menu "DMA support"

config SDHC_SDMA
	bool "Single operation DMA (SDMA) support"

config SDHC_ADMA
	bool "Advanced DMA (ADMA) support"
	depends SDHC4

endmenu

config SDHC_PM
	bool "Enable suspend/resume mechanism support"

config SDHC_BUFFER
	bool "Enable buffer control support"

config SDHC_AUTO_CMD12
	bool "Auto CMD12 support"

config SDHC_AUTO_CMD23
	bool "Auto CMD23 support"
	depends SDHC4

config SDHC_ACCEL
	bool "Enable simulation acceleration"
	depends SIMULATION

endif

endif

endif

endif
